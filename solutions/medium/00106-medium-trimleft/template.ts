type TrimLeft<S extends string> = S extends `${' ' | '\n' | '\t'}${infer R}` ? TrimLeft<R> : S

/*
## 注释
  这个类型别名 `TrimLeft` 是一个递归条件类型，用于从字符串类型 `S` 的左侧移除空白字符（空格、换行符或制表符）。

### 类型参数
  - `S extends string`: 这是一个泛型参数 `S`，它必须是一个字符串类型。

### 条件类型
   ```typescript
    `S extends `${' ' | '\n' | '\t'}${infer R}` ? TrimLeft<R> : S`
    ```
  - 这是一个条件类型，用于检查字符串是否以空白字符开头。
  - 如果是，则移除该空白字符并继续检查剩余部分（这就是递归的部分）。
  - 如果不是，则返回原字符串（意味着左侧不再有空白字符）。

### 详细分解
  1. **模式匹配和推断**：
      ```typescript
      S extends `${' ' | '\n' | '\t'}${infer R}`
      ```
      - 这一部分使用了模板字面量类型，以及 TypeScript 的条件类型和模式匹配功能。
      - `${' ' | '\n' | '\t'}${infer R}` 是一种模板字面量类型，它尝试匹配 `S` 是否以空格、换行符或制表符开头。
      - 如果 `S` 符合这种模式，`infer R` 将推断出去掉前缀后的剩余字符串，并将其赋值给 `R`。
  2. **递归调用**：
      ```typescript
      ? TrimLeft<R>
      ```
      - 如果 `S` 以空白字符开头，那么根据推断得到的 `R` 再次调用 `TrimLeft`。
      - 这是递归的核心，通过递归逐步去除左侧的所有空白字符。
  3. **终止条件**：
      ```typescript
      : S
      ```
      - 当 `S` 不再以空白字符开头时，条件类型的结果将是 `S` 自身。
      - 这有效地终止了递归
*/
