type MyPick<T, K extends keyof T> = {
  [P in K]: T[P]
}

/*
  ## 注释
  这个类型别名 `MyPick` 的作用是从类型 `T` 中挑选出某些属性，并构造一个新的类型。它类似于 TypeScript 内置的 `Pick` 类型。

  ### 类型参数
  - `T`: 一个对象类型，你可以从中挑选属性。
  - `K extends keyof T`: 一个联合类型，表示 `T` 类型中的一组键（即属性名）。

  ### 关键点
  - `K extends keyof T` 限制了 `K` 必须是 `T` 的键之一。这确保了你只能挑选存在于 `T` 中的属性。

  ### 映射类型
  映射类型是 TypeScript 中的一种高级类型，它允许你创建基于另一个类型的新类型。我们这里就是在使用映射类型。

  #### 分解映射类型 `{ [P in K]: T[P] }`
  1. `[P in K]`:
    - 这是一个索引签名，它表示对于联合类型 `K` 中的每一个属性 `P`，我们都将其包含在新类型中。
    - 具体来说，`P` 将遍历 `K` 中的所有属性。
  2. `T[P]`:
    - 我们通过 `T[P]` 获取 `T` 类型中属性 `P` 的类型。
    - 这意味着新类型中的属性 `P` 将拥有与 `T` 中相同的类型。
*/
