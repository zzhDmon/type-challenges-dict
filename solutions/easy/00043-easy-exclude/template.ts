type MyExclude<T, U> = T extends U ? never : T

/*
## 注释
### 类型参数
  - `T`: 待处理的类型，可以是任何类型的联合类型。
  - `U`: 要从 `T` 中排除的类型，也可以是任何类型的联合类型。
### 条件类型
  TypeScript 中的条件类型类似于 JavaScript 中的三元表达式 `condition ? trueExpression : falseExpression`，它在类型层次上进行条件判断和选择。
#### 分解条件类型
  1. `T extends U`:
    - 这里的 `extends` 用于检查类型兼容性。
    - `T extends U` 判断 `T` 是否可以赋值给 `U`，即 `T` 是否是 `U` 的子类型。如果 `T` 是 `U` 的子类型（或 `T` 中的某些子类型是 `U`），则条件为真。
  2. `? never`:
    - 如果 `T` 中的某个成员可以赋值给 `U`，那么在这个条件类型中，该成员将被排除掉，即返回 `never` 类型。
    - `never` 类型表示的是那些永不存在的值。在这里，它被用来表示应该从结果中排除这些成员。
  3. `: T`:
    - 如果 `T` 中的某个成员不能赋值给 `U`，则保留该成员并返回它的类型。
*/
